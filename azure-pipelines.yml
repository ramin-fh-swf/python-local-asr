# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

# pool:
#   vmImage: ubuntu-latest

pool: 
  name: Own Agent Pool
  demands: Agent.Name -equals vm-agent

variables:
  VENV_DIR: '.venv_linux'

steps:
# Set up the repository to use LFS (Large File Storage)
- checkout: self
  lfs: true

# Install ffmpeg for torchaudio MP3 support
- script: |
    sudo apt update
    sudo apt install -y ffmpeg
  displayName: 'Install ffmpeg for torchaudio MP3 support'

# Set up Python version
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.12'
  condition: ne(variables['Agent.Name'], 'vm-agent')

# Set up Python & virtual environment
- script: |
    python3 -m venv $(VENV_DIR)
    source $(VENV_DIR)/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install python dependencies'
  condition: eq(variables['Agent.Name'], 'vm-agent')

# Pytest ausf√ºhren + Coverage erzeugen
- script: |
    source $(VENV_DIR)/bin/activate
    python3 -m pytest
  displayName: 'Run tests with pytest'

# Integration test
- script: |
    source $(VENV_DIR)/bin/activate
    OUTPUT=$(python3 wav2vec_audio_transcribe.py test_audio_files/common_voice_en_42693865.mp3)
    EXPECTED="THE INSTRUCTION MANUEL OF THE ENGLISH VERSION IS ALSO FILLED WITH INCONSISTENT INFORMATION"
    echo "Output: $OUTPUT"
    echo "Expected: $EXPECTED"
    if [ "$OUTPUT" != "$EXPECTED" ]; then
      echo "Transcription did not match expected output."
      exit 1
    else
      echo "Transcription matched expected output."
    fi
  displayName: 'Integration test: validate transcription output'

# Check code formatting with Black
- script: |
    source $(VENV_DIR)/bin/activate
    black wav2vec_audio_transcribe.py --check
  displayName: 'Check code formatting with Black'
  continueOnError: false

# Generate coverage report
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: 'tests/htmlcov'
    artifactName: 'test-coverage-report'
    publishLocation: 'Container'
  name: publish_coverage_report
  displayName: 'Publish coverage report artifact'
  

# Create ZIP package of the application
- script: |
    zip -r wav2vec_package.zip wav2vec_audio_transcribe.py test_audio_files/ models/ requirements.txt
  name: create_zip
  displayName: 'Create ZIP package of application'

# Publish the ZIP package as an artifact
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: 'wav2vec_package.zip'
    artifactName: 'transcriber-zip'
    publishLocation: 'Container'
  displayName: 'Publish application ZIP artifact'
